<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>virtual-summary</title>
    <url>/articles/2022/06/24/virtual-summary/</url>
    <content><![CDATA[<h1 id="主线"><a href="#主线" class="headerlink" title="主线"></a>主线</h1><p>虚拟化技术也是有发展历史的。从历史发展的视角看虚拟化技术，我觉得很有意思。<br>虚拟化概念在计算机领域无处不在，比如：进程、文件系统、虚拟内存等。</p>
<p>在如今，人们遇到一个很有意思的问题：买那么多架构的硬件 __too expensive__，只买一台行不行？——虚拟化<br>                                 买了那么多硬件，空闲太浪费了，能不能面向用户租出去？——云计算（核心是虚拟化技术）</p>
<p>需求和市场契合，人们开始认真研究怎么弄。</p>
<h2 id="指令困局"><a href="#指令困局" class="headerlink" title="指令困局"></a>指令困局</h2><h3 id="从CPU看指令分类"><a href="#从CPU看指令分类" class="headerlink" title="从CPU看指令分类"></a>从CPU看指令分类</h3><p>（为啥不看操作系统？—— 操作系统又不是轮子，没有CPU怎么跑？）</p>
<p>CPU是一个高度集成的电路板，提供各种逻辑运算，具体的表现是 __指令__。</p>
<p>从硬件的角度来看，指令被分为敏感指令和非敏感指令。敏感指令与硬件资源相关。</p>
<p>从使用者的角度来看，指令被分为特权指令和非特权指令。特权指令与系统的关键资源相关。</p>
<p>__注意__：系统关键资源$\subseteq$硬件资源，因此: 特权指令 + 部分非特权指令 &#x3D; 敏感指令</p>
<p><img src="/virtual-summary/vmm.png"></p>
<h3 id="从CPU看指令分级"><a href="#从CPU看指令分级" class="headerlink" title="从CPU看指令分级"></a>从CPU看指令分级</h3><p>指令划分是为了保护硬件资源。</p>
<p>在理论上，CPU将指令划分为4个等级，对应ring 0 ~ 3。数字越低，权限越高。操作系统内核，作为管理硬件资源的“大家长”，自然必须有最大的权限ring 0。如果一个ring 3的程序需要行使ring 0的部分功能，必须通过系统调用让“大家长”干。</p>
<p>一台设备虽然不可能同时有两个“大家长”，但可以有几个“二当家”，在董事长的同意下代行权力（模块或者驱动作为内核的一部分）。</p>
<p>如果我要模拟运行一台新的、不同于硬件架构的计算机，我该运行在哪个等级？</p>
<h3 id="指令对虚拟化的影响"><a href="#指令对虚拟化的影响" class="headerlink" title="指令对虚拟化的影响"></a>指令对虚拟化的影响</h3><p>由于部分非特权指令可能也是敏感指令，攻击者可以利用这个特点攻击计算机硬件，影响宿主机。</p>
<p>若特权指令&#x3D;敏感指令，则称呼该指令集系统能够支持虚拟化。（可惜x86没有达到要求 :) ）</p>
<h2 id="虚拟化技术发展与CPU指令"><a href="#虚拟化技术发展与CPU指令" class="headerlink" title="虚拟化技术发展与CPU指令"></a>虚拟化技术发展与CPU指令</h2><p>虚拟化技术的发展收到CPU指令的影响：。该问题同时引申出管理VM的VMM运行在哪个等级。VMM有模拟或调用硬件资源的功能，因此必须运行在ring 0级，典型的有：KVM。因此，VM只能运行在其他等级，或者借助硬件运行在ring 0级。</p>
<p>宏观上，将有无硬件辅助来区分虚拟化的技术发展；</p>
<h3 id="无硬件辅助：半虚拟化、全虚拟化"><a href="#无硬件辅助：半虚拟化、全虚拟化" class="headerlink" title="无硬件辅助：半虚拟化、全虚拟化"></a>无硬件辅助：半虚拟化、全虚拟化</h3><p>半虚拟化和全虚拟化技术，VMM运行在ring 0级。来自Guest OS的敏感指令被VMM截获，可以通过改变指令调用的方式：对VMM的调用（半虚拟化）或动态翻译将特权转成非特权（全虚拟化）</p>
<p><img src="/virtual-summary/ParaVirtualization.png"></p>
<p>然而，由于VMM的介入，执行效率有待商榷。</p>
<h3 id="有硬件辅助：-硬件虚拟化"><a href="#有硬件辅助：-硬件虚拟化" class="headerlink" title="有硬件辅助： 硬件虚拟化"></a>有硬件辅助： 硬件虚拟化</h3><p>目前，硬件虚拟化有两家：Intel VT-x和AMD ，都基于x86架构。</p>
<p>新的引入：VMX（Virtual Machine Extened)，新的寄存器VMCS，新模式VMX root mode和VMX non-root mdoe。</p>
<p>为了与指令集分级相匹配，习惯上，VMX non-root被称为ring -1级。这使得VMM上的代码可以和Guest OS代码来回切换执行。具体切换方法为VM entry和VM exit。</p>
<p><img src="/virtual-summary/root_and_non-root.png"></p>
<p>本文研究的内容为QEMU-KVM，</p>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>qemu</tag>
        <tag>virtualization</tag>
      </tags>
  </entry>
  <entry>
    <title>libvmi_patch</title>
    <url>/articles/2022/06/27/libvmi-patch/</url>
    <content><![CDATA[<p>diff –git a&#x2F;Makefile.target b&#x2F;Makefile.target<br>index 933b27453a..9abc61a870 100644<br>— a&#x2F;Makefile.target<br>+++ b&#x2F;Makefile.target<br>@@ -152,7 +152,7 @@ endif #CONFIG_BSD_USER<br> #########################################################</p>
<h1 id="System-emulator-target"><a href="#System-emulator-target" class="headerlink" title="System emulator target"></a>System emulator target</h1><p> ifdef CONFIG_SOFTMMU<br>-obj-y +&#x3D; arch_init.o cpus.o gdbstub.o balloon.o ioport.o<br>+obj-y +&#x3D; arch_init.o cpus.o gdbstub.o balloon.o ioport.o memory-access.o<br> obj-y +&#x3D; qtest.o<br> obj-y +&#x3D; dump&#x2F;<br> obj-y +&#x3D; hw&#x2F;<br>diff –git a&#x2F;include&#x2F;monitor&#x2F;hmp.h b&#x2F;include&#x2F;monitor&#x2F;hmp.h<br>index a0e9511440..73d5297173 100644<br>— a&#x2F;include&#x2F;monitor&#x2F;hmp.h<br>+++ b&#x2F;include&#x2F;monitor&#x2F;hmp.h<br>@@ -52,6 +52,7 @@ void hmp_announce_self(Monitor *mon, const QDict *qdict);<br> void hmp_cpu(Monitor *mon, const QDict *qdict);<br> void hmp_memsave(Monitor *mon, const QDict *qdict);<br> void hmp_pmemsave(Monitor *mon, const QDict *qdict);<br>+void hmp_pmemaccess(Monitor *mon, const QDict *qdict);<br> void hmp_ringbuf_write(Monitor *mon, const QDict *qdict);<br> void hmp_ringbuf_read(Monitor *mon, const QDict *qdict);<br> void hmp_cont(Monitor *mon, const QDict *qdict);<br>diff –git a&#x2F;libvmi_request.h b&#x2F;libvmi_request.h<br>new file mode 100644<br>index 0000000000..0770cff55d<br>— &#x2F;dev&#x2F;null<br>+++ b&#x2F;libvmi_request.h<br>@@ -0,0 +1,10 @@<br>+#ifndef LIBVMI_REQUEST_H<br>+#define LIBVMI_REQUEST_H<br>+<br>+struct request {</p>
<ul>
<li>uint64_t type;      &#x2F;&#x2F; 0 quit, 1 read, 2 write, … rest reserved</li>
<li>uint64_t address;  &#x2F;&#x2F; address to read from OR write to</li>
<li>uint64_t length;   &#x2F;&#x2F; number of bytes to read OR write<br>+};</li>
<li>+#endif &#x2F;* LIBVMI_REQUEST_H <em>&#x2F;<br>diff –git a&#x2F;memory-access.c b&#x2F;memory-access.c<br>new file mode 100644<br>index 0000000000..72ac93ae2c<br>— &#x2F;dev&#x2F;null<br>+++ b&#x2F;memory-access.c<br>@@ -0,0 +1,249 @@<br>+&#x2F;</em></li>
<li><ul>
<li>Access guest physical memory via a domain socket.</li>
</ul>
</li>
<li><ul>
<li></li>
</ul>
</li>
<li><ul>
<li>Copyright (C) 2011 Sandia National Laboratories</li>
</ul>
</li>
<li><ul>
<li>Original Author: Bryan D. Payne (<a href="mailto:&#98;&#x64;&#x70;&#x61;&#x79;&#x6e;&#101;&#x40;&#97;&#x63;&#109;&#x2e;&#111;&#114;&#x67;">&#98;&#x64;&#x70;&#x61;&#x79;&#x6e;&#101;&#x40;&#97;&#x63;&#109;&#x2e;&#111;&#114;&#x67;</a>)</li>
</ul>
</li>
<li><ul>
<li></li>
</ul>
</li>
<li><ul>
<li>Refurbished for modern QEMU by Valerio Aimale (<a href="mailto:&#x76;&#x61;&#x6c;&#x65;&#x72;&#105;&#x6f;&#x40;&#x61;&#x69;&#109;&#x61;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#x76;&#x61;&#x6c;&#x65;&#x72;&#105;&#x6f;&#x40;&#x61;&#x69;&#109;&#x61;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>), in 2015</li>
</ul>
</li>
<li>*&#x2F;</li>
<li>+#include &lt;stdlib.h&gt;<br>+#include &lt;stdio.h&gt;<br>+#include &lt;string.h&gt;<br>+#include &lt;pthread.h&gt;<br>+#include &lt;sys&#x2F;types.h&gt;<br>+#include &lt;sys&#x2F;socket.h&gt;<br>+#include &lt;sys&#x2F;un.h&gt;<br>+#include &lt;unistd.h&gt;<br>+#include &lt;signal.h&gt;<br>+#include &lt;stdint.h&gt;<br>+#include &lt;poll.h&gt;</li>
<li>+#include “memory-access.h”<br>+#include “exec&#x2F;cpu-common.h”<br>+#include “libvmi_request.h”</li>
<li></li>
<li>+static uint64_t<br>+connection_read_memory (uint64_t user_paddr, void *buf, uint64_t user_len)<br>+{</li>
<li>hwaddr paddr &#x3D; (hwaddr) user_paddr;</li>
<li>hwaddr len &#x3D; (hwaddr) user_len;</li>
<li>void *guestmem &#x3D; cpu_physical_memory_map(paddr, &amp;len, 0);</li>
<li>if (!guestmem){</li>
<li><pre><code>   return 0;
</code></pre>
</li>
<li>}</li>
<li>memcpy(buf, guestmem, len);</li>
<li>cpu_physical_memory_unmap(guestmem, len, 0, len);</li>
<li></li>
<li>return len;<br>+}</li>
<li>+static uint64_t<br>+connection_write_memory (uint64_t user_paddr, void *buf, uint64_t user_len)<br>+{</li>
<li>hwaddr paddr &#x3D; (hwaddr) user_paddr;</li>
<li>hwaddr len &#x3D; (hwaddr) user_len;</li>
<li>void *guestmem &#x3D; cpu_physical_memory_map(paddr, &amp;len, 1);</li>
<li>if (!guestmem){</li>
<li><pre><code>   return 0;
</code></pre>
</li>
<li>}</li>
<li>memcpy(guestmem, buf, len);</li>
<li>cpu_physical_memory_unmap(guestmem, len, 0, len);</li>
<li></li>
<li>return len;<br>+}</li>
<li>+static void<br>+send_success_ack (int connection_fd)<br>+{</li>
<li>uint8_t success &#x3D; 1;</li>
<li>int nbytes &#x3D; write(connection_fd, &amp;success, 1);</li>
<li>if (1 !&#x3D; nbytes){</li>
<li><pre><code>   fprintf(stderr, &quot;Qemu pmemaccess: failed to send success ack\n&quot;);
</code></pre>
</li>
<li>}<br>+}</li>
<li>+static void<br>+send_fail_ack (int connection_fd)<br>+{</li>
<li>uint8_t fail &#x3D; 0;</li>
<li>int nbytes &#x3D; write(connection_fd, &amp;fail, 1);</li>
<li>if (1 !&#x3D; nbytes){</li>
<li><pre><code>   fprintf(stderr, &quot;Qemu pmemaccess: failed to send fail ack\n&quot;);
</code></pre>
</li>
<li>}<br>+}</li>
<li>+static void<br>+connection_handler (int connection_fd)<br>+{</li>
<li>int nbytes;</li>
<li>struct request req;</li>
<li>struct pollfd *fds &#x3D; calloc(1, sizeof(struct pollfd));</li>
<li>if (!fds)</li>
<li>{</li>
<li><pre><code>   fprintf(stderr, &quot;Allocating pollfd failed\n&quot;);
</code></pre>
</li>
<li><pre><code>   return;
</code></pre>
</li>
<li>}</li>
<li>fds[0].fd &#x3D; connection_fd;</li>
<li>fds[0].events &#x3D; POLLIN | POLLERR | POLLHUP | POLLNVAL;</li>
<li></li>
<li>while (1){</li>
<li><pre><code>   // poll on our connection fd
</code></pre>
</li>
<li><pre><code>   int nb_modified = poll(fds, 1, -1);
</code></pre>
</li>
<li><pre><code>   if (nb_modified &lt; 0)
</code></pre>
</li>
<li><pre><code>   &#123;
</code></pre>
</li>
<li><pre><code>       // poll failed
</code></pre>
</li>
<li><pre><code>       fprintf(stderr, &quot;Poll failed on vmi socket: %s\n&quot;, strerror(errno));
</code></pre>
</li>
<li><pre><code>       continue;
</code></pre>
</li>
<li><pre><code>   &#125;
</code></pre>
</li>
<li><pre><code>   else if (nb_modified == 0)
</code></pre>
</li>
<li><pre><code>   &#123;
</code></pre>
</li>
<li><pre><code>       // timeout
</code></pre>
</li>
<li><pre><code>       fprintf(stderr, &quot;Poll timeout on vmi socket\n&quot;);
</code></pre>
</li>
<li><pre><code>       continue;
</code></pre>
</li>
<li><pre><code>   &#125;
</code></pre>
</li>
<li><pre><code>   else if (fds[0].revents &amp; POLLERR
</code></pre>
</li>
<li><pre><code>           || fds[0].revents &amp; POLLHUP
</code></pre>
</li>
<li><pre><code>           || fds[0].revents &amp; POLLNVAL)
</code></pre>
</li>
<li><pre><code>   &#123;
</code></pre>
</li>
<li><pre><code>       // error
</code></pre>
</li>
<li><pre><code>       fprintf(stderr, &quot;Poll error on vmi socket\n&quot;);
</code></pre>
</li>
<li><pre><code>       break;
</code></pre>
</li>
<li><pre><code>   &#125;
</code></pre>
</li>
<li><pre><code>   else if (fds[0].revents &amp; POLLIN)
</code></pre>
</li>
<li><pre><code>   &#123;
</code></pre>
</li>
<li><pre><code>       // client request should match the struct request format
</code></pre>
</li>
<li><pre><code>       nbytes = read(connection_fd, &amp;req, sizeof(struct request));
</code></pre>
</li>
<li><pre><code>       if (nbytes == -1 || nbytes != sizeof(struct request))&#123;
</code></pre>
</li>
<li><pre><code>           // error
</code></pre>
</li>
<li><pre><code>           continue;
</code></pre>
</li>
<li><pre><code>       &#125;
</code></pre>
</li>
<li><pre><code>       else if (req.type == 0)&#123;
</code></pre>
</li>
<li><pre><code>           // request to quit, goodbye
</code></pre>
</li>
<li><pre><code>           break;
</code></pre>
</li>
<li><pre><code>       &#125;
</code></pre>
</li>
<li><pre><code>       else if (req.type == 1)&#123;
</code></pre>
</li>
<li><pre><code>           // request to read
</code></pre>
</li>
<li><pre><code>           char *buf = malloc(req.length + 1);
</code></pre>
</li>
<li><pre><code>           nbytes = connection_read_memory(req.address, buf, req.length);
</code></pre>
</li>
<li><pre><code>           if (nbytes != req.length)&#123;
</code></pre>
</li>
<li><pre><code>               // read failure, return failure message
</code></pre>
</li>
<li><pre><code>               buf[req.length] = 0; // set last byte to 0 for failure
</code></pre>
</li>
<li><pre><code>               nbytes = write(connection_fd, buf, 1);
</code></pre>
</li>
<li><pre><code>           &#125;
</code></pre>
</li>
<li><pre><code>           else&#123;
</code></pre>
</li>
<li><pre><code>               // read success, return bytes
</code></pre>
</li>
<li><pre><code>               buf[req.length] = 1; // set last byte to 1 for success
</code></pre>
</li>
<li><pre><code>               nbytes = write(connection_fd, buf, nbytes + 1);
</code></pre>
</li>
<li><pre><code>           &#125;
</code></pre>
</li>
<li><pre><code>           free(buf);
</code></pre>
</li>
<li><pre><code>       &#125;
</code></pre>
</li>
<li><pre><code>       else if (req.type == 2)&#123;
</code></pre>
</li>
<li><pre><code>           // request to write
</code></pre>
</li>
<li><pre><code>           void *write_buf = malloc(req.length);
</code></pre>
</li>
<li><pre><code>           nbytes = read(connection_fd, write_buf, req.length);
</code></pre>
</li>
<li><pre><code>           if (nbytes != req.length)&#123;
</code></pre>
</li>
<li><pre><code>               // failed reading the message to write
</code></pre>
</li>
<li><pre><code>               send_fail_ack(connection_fd);
</code></pre>
</li>
<li><pre><code>           &#125;
</code></pre>
</li>
<li><pre><code>           else&#123;
</code></pre>
</li>
<li><pre><code>               // do the write
</code></pre>
</li>
<li><pre><code>               nbytes = connection_write_memory(req.address, write_buf, req.length);
</code></pre>
</li>
<li><pre><code>               if (nbytes == req.length)&#123;
</code></pre>
</li>
<li><pre><code>                   send_success_ack(connection_fd);
</code></pre>
</li>
<li><pre><code>               &#125;
</code></pre>
</li>
<li><pre><code>               else&#123;
</code></pre>
</li>
<li><pre><code>                   send_fail_ack(connection_fd);
</code></pre>
</li>
<li><pre><code>               &#125;
</code></pre>
</li>
<li><pre><code>           &#125;
</code></pre>
</li>
<li><pre><code>           free(write_buf);
</code></pre>
</li>
<li><pre><code>       &#125;
</code></pre>
</li>
<li><pre><code>       else&#123;
</code></pre>
</li>
<li><pre><code>           // unknown command
</code></pre>
</li>
<li><pre><code>           fprintf(stderr, &quot;Qemu pmemaccess: ignoring unknown command (%&quot; PRIu64 &quot;)\n&quot;, req.type);
</code></pre>
</li>
<li><pre><code>           char *buf = malloc(1);
</code></pre>
</li>
<li><pre><code>           buf[0] = 0;
</code></pre>
</li>
<li><pre><code>           nbytes = write(connection_fd, buf, 1);
</code></pre>
</li>
<li><pre><code>           free(buf);
</code></pre>
</li>
<li><pre><code>       &#125;
</code></pre>
</li>
<li><pre><code>   &#125;
</code></pre>
</li>
<li>}</li>
<li></li>
<li>free(fds);</li>
<li>close(connection_fd);<br>+}</li>
<li>+static void *<br>+memory_access_thread (void *p)<br>+{</li>
<li>int connection_fd;</li>
<li>struct pmemaccess_args *pargs &#x3D; (struct pmemaccess_args *)p;</li>
<li></li>
<li>&#x2F;&#x2F; accept incoming connections</li>
<li>connection_fd &#x3D; accept(pargs-&gt;socket_fd, (struct sockaddr *) pargs-&gt;address, &amp;(pargs-&gt;address_length));</li>
<li>connection_handler(connection_fd);</li>
<li></li>
<li>close(pargs-&gt;socket_fd);</li>
<li>unlink(pargs-&gt;path);</li>
<li>free(pargs-&gt;path);</li>
<li>free(pargs-&gt;address);</li>
<li>free(pargs);</li>
<li>return NULL;<br>+}</li>
<li>+void<br>+qmp_pmemaccess (const char *path, Error **errp)<br>+{</li>
<li>pthread_t thread;</li>
<li>sigset_t set, oldset;</li>
<li>struct pmemaccess_args *pargs;</li>
<li></li>
<li>&#x2F;&#x2F; create the args struct</li>
<li>pargs &#x3D; (struct pmemaccess_args *) malloc(sizeof(struct pmemaccess_args));</li>
<li>if (pargs &#x3D;&#x3D; NULL){</li>
<li><pre><code>   error_setg(errp, &quot;Qemu pmemaccess: malloc failed&quot;);
</code></pre>
</li>
<li><pre><code>   return;
</code></pre>
</li>
<li>}</li>
<li></li>
<li>pargs-&gt;errp &#x3D; errp;</li>
<li>&#x2F;&#x2F; create a copy of path that we can safely use</li>
<li>size_t path_size &#x3D; strlen(path);</li>
<li>pargs-&gt;path &#x3D; malloc(path_size + 1);</li>
<li>memcpy(pargs-&gt;path, path, path_size);</li>
<li>pargs-&gt;path[path_size] &#x3D; ‘\0’;</li>
<li></li>
<li>&#x2F;&#x2F; create socket</li>
<li>pargs-&gt;socket_fd &#x3D; socket(PF_UNIX, SOCK_STREAM, 0);</li>
<li>if (pargs-&gt;socket_fd &lt; 0){</li>
<li><pre><code>   error_setg(pargs-&gt;errp, &quot;Qemu pmemaccess: socket failed&quot;);
</code></pre>
</li>
<li><pre><code>   return;
</code></pre>
</li>
<li>}</li>
<li>&#x2F;&#x2F; unlink path if already exists</li>
<li>unlink(path);</li>
<li>&#x2F;&#x2F; bind socket</li>
<li>pargs-&gt;address &#x3D; malloc(sizeof(struct sockaddr_un));</li>
<li>if (pargs-&gt;address &#x3D;&#x3D; NULL){</li>
<li><pre><code>   error_setg(pargs-&gt;errp, &quot;Qemu pmemaccess: malloc failed&quot;);
</code></pre>
</li>
<li><pre><code>   return;
</code></pre>
</li>
<li>}</li>
<li>pargs-&gt;address-&gt;sun_family &#x3D; AF_UNIX;</li>
<li>pargs-&gt;address_length &#x3D; sizeof(pargs-&gt;address-&gt;sun_family) + sprintf(pargs-&gt;address-&gt;sun_path, “%s”, (char *) pargs-&gt;path);</li>
<li>if (bind(pargs-&gt;socket_fd, (struct sockaddr *) pargs-&gt;address, pargs-&gt;address_length) !&#x3D; 0){</li>
<li><pre><code>   printf(&quot;could not bind\n&quot;);
</code></pre>
</li>
<li><pre><code>   error_setg(pargs-&gt;errp, &quot;Qemu pmemaccess: bind failed&quot;);
</code></pre>
</li>
<li><pre><code>   return;
</code></pre>
</li>
<li>}</li>
<li></li>
<li>&#x2F;&#x2F; listen</li>
<li>if (listen(pargs-&gt;socket_fd, 0) !&#x3D; 0){</li>
<li><pre><code>   error_setg(pargs-&gt;errp, &quot;Qemu pmemaccess: listen failed&quot;);
</code></pre>
</li>
<li><pre><code>   return;
</code></pre>
</li>
<li>}</li>
<li></li>
<li>&#x2F;&#x2F; start the thread</li>
<li>sigfillset(&amp;set);</li>
<li>pthread_sigmask(SIG_SETMASK, &amp;set, &amp;oldset);</li>
<li>pthread_create(&amp;thread, NULL, memory_access_thread, pargs);</li>
<li>pthread_sigmask(SIG_SETMASK, &amp;oldset, NULL);<br>+}<br>diff –git a&#x2F;memory-access.h b&#x2F;memory-access.h<br>new file mode 100644<br>index 0000000000..21c713735d<br>— &#x2F;dev&#x2F;null<br>+++ b&#x2F;memory-access.h<br>@@ -0,0 +1,24 @@<br>+&#x2F;*</li>
<li><ul>
<li>Open A UNIX Socket access to physical memory</li>
</ul>
</li>
<li><ul>
<li></li>
</ul>
</li>
<li><ul>
<li>Author: Valerio G. Aimale <a href="mailto:&#118;&#x61;&#x6c;&#x65;&#x72;&#105;&#x6f;&#x40;&#x61;&#105;&#x6d;&#x61;&#108;&#x65;&#46;&#x63;&#111;&#109;">&#118;&#x61;&#x6c;&#x65;&#x72;&#105;&#x6f;&#x40;&#x61;&#105;&#x6d;&#x61;&#108;&#x65;&#46;&#x63;&#111;&#109;</a></li>
</ul>
</li>
<li>*&#x2F;</li>
<li>+#ifndef MEMORY_ACCESS_H<br>+#define MEMORY_ACCESS_H</li>
<li>+#include &lt;sys&#x2F;socket.h&gt;<br>+#include “qemu&#x2F;osdep.h”<br>+#include “qapi&#x2F;error.h”</li>
<li>+void qmp_pmemaccess (const char *path, Error **errp);</li>
<li>+struct pmemaccess_args {</li>
<li>int socket_fd;</li>
<li>struct sockaddr_un *address;</li>
<li>socklen_t address_length;</li>
<li>char *path;</li>
<li>Error **errp;<br>+};</li>
<li>+#endif &#x2F;* MEMORY_ACCESS_H *&#x2F;<br>diff –git a&#x2F;monitor&#x2F;hmp-cmds.c b&#x2F;monitor&#x2F;hmp-cmds.c<br>index 5ca3ebe942..9cc404db5e 100644<br>— a&#x2F;monitor&#x2F;hmp-cmds.c<br>+++ b&#x2F;monitor&#x2F;hmp-cmds.c<br>@@ -57,6 +57,7 @@<br>#include “hw&#x2F;rdma&#x2F;rdma.h”<br>#include “migration&#x2F;snapshot.h”<br>#include “migration&#x2F;misc.h”<br>+#include “memory-access.h”#ifdef CONFIG_SPICE<br>#include &lt;spice&#x2F;enums.h&gt;</li>
</ul>
<p>@@ -113,9 +114,10 @@ void hmp_info_version(Monitor *mon, const QDict *qdict)</p>
<pre><code> info = qmp_query_version(NULL);
</code></pre>
<ul>
<li>monitor_printf(mon, “%” PRId64 “.%” PRId64 “.%” PRId64 “%s\n”,</li>
</ul>
<ul>
<li>monitor_printf(mon, “%” PRId64 “.%” PRId64 “.%” PRId64 “%s %s\n”,<br>           info-&gt;qemu-&gt;major, info-&gt;qemu-&gt;minor, info-&gt;qemu-&gt;micro,</li>
</ul>
<ul>
<li><pre><code>              info-&gt;package);
</code></pre>
</li>
</ul>
<ul>
<li><pre><code>              info-&gt;package,
</code></pre>
</li>
<li><pre><code>              &quot;vmi&quot;);
</code></pre>
   qapi_free_VersionInfo(info);</li>
</ul>
<p> }<br>@@ -1250,6 +1252,15 @@ void hmp_pmemsave(Monitor *mon, const QDict *qdict)<br>     hmp_handle_error(mon, &amp;err);<br> }</p>
<p>+void hmp_pmemaccess(Monitor *mon, const QDict *qdict)<br>+{</p>
<ul>
<li>const char *path &#x3D; qdict_get_str(qdict, “path”);</li>
<li>Error *err &#x3D; NULL;</li>
<li></li>
<li>qmp_pmemaccess(path, &amp;err);</li>
<li>hmp_handle_error(mon, &amp;err);<br>+}</li>
<li>void hmp_ringbuf_write(Monitor *mon, const QDict *qdict)<br>{<br>const char *chardev &#x3D; qdict_get_str(qdict, “device”);<br>diff –git a&#x2F;qapi&#x2F;Makefile.objs b&#x2F;qapi&#x2F;Makefile.objs<br>index c5a29e86e2..fa7aa0c72d 100644<br>— a&#x2F;qapi&#x2F;Makefile.objs<br>+++ b&#x2F;qapi&#x2F;Makefile.objs<br>@@ -8,7 +8,7 @@ util-obj-y +&#x3D; qapi-util.o<br>QAPI_COMMON_MODULES &#x3D; audio authz block-core block char common crypto<br>QAPI_COMMON_MODULES +&#x3D; dump introspect job machine migration misc net<br>QAPI_COMMON_MODULES +&#x3D; qdev qom rdma rocker run-state sockets tpm<br>-QAPI_COMMON_MODULES +&#x3D; trace transaction ui<br>+QAPI_COMMON_MODULES +&#x3D; trace transaction ui libvmi<br>QAPI_TARGET_MODULES &#x3D; machine-target misc-target<br>QAPI_MODULES &#x3D; $(QAPI_COMMON_MODULES) $(QAPI_TARGET_MODULES)</li>
</ul>
<p>diff –git a&#x2F;qapi&#x2F;libvmi.json b&#x2F;qapi&#x2F;libvmi.json<br>new file mode 100644<br>index 0000000000..54deaa31d8<br>— &#x2F;dev&#x2F;null<br>+++ b&#x2F;qapi&#x2F;libvmi.json<br>@@ -0,0 +1,41 @@<br>+# -<em>- Mode: Python -</em>-<br>+#<br>+<br>+##<br>+# &#x3D; libvmi memory access<br>+##</p>
<p>+<br>+##<br>+# @pmemaccess:<br>+#<br>+# Open A UNIX Socket access to physical memory<br>+#<br>+# @path: the name of the UNIX socket pipe<br>+#<br>+# Returns: Nothing on success<br>+#<br>+# Since: 2.4.0.1<br>+#<br>+# Notes: Derived from previously existing patches. When command<br>+# succeeds connect to the open socket. Write a binary structure to<br>+# the socket as:<br>+#<br>+# struct request {<br>+#     uint64_t type;   &#x2F;&#x2F; 0 quit, 1 read, 2 write, … rest reserved<br>+#     uint64_t address;   &#x2F;&#x2F; address to read from OR write to<br>+#     uint64_t length;    &#x2F;&#x2F; number of bytes to read OR write<br>+# };<br>+#<br>+# If it is a read operation, Qemu will return lenght+1 bytes. Read lenght+1<br>+# bytes. the last byte will be a 1 for success, or a 0 for failure.<br>+#<br>+# Example:<br>+#<br>+# -&gt; { “execute”: “pmemaccess”,<br>+#     “arguments”: { “path”: “&#x2F;tmp&#x2F;physical-mem-socket” } }<br>+# &lt;- { “return”: {} }<br>+#<br>+##<br>+{ ‘command’: ‘pmemaccess’,</p>
<ul>
<li>‘data’: {‘path’: ‘str’} }</li>
<li>diff –git a&#x2F;qapi&#x2F;qapi-schema.json b&#x2F;qapi&#x2F;qapi-schema.json<br>index 38af54d6b3..5ca4bf2832 100644<br>— a&#x2F;qapi&#x2F;qapi-schema.json<br>+++ b&#x2F;qapi&#x2F;qapi-schema.json<br>@@ -105,3 +105,4 @@<br>{ ‘include’: ‘misc.json’ }<br>{ ‘include’: ‘misc-target.json’ }<br>{ ‘include’: ‘audio.json’ }<h2 id="‘include’-‘libvmi-json’"><a href="#‘include’-‘libvmi-json’" class="headerlink" title="+{ ‘include’: ‘libvmi.json’ }"></a>+{ ‘include’: ‘libvmi.json’ }</h2>2.11.0</li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>qemu</tag>
        <tag>kvm</tag>
        <tag>libvmi</tag>
      </tags>
  </entry>
  <entry>
    <title>A Interesting expr on LibVMI adapting</title>
    <url>/articles/2022/06/28/A%20Interesting%20expr%20on%20LibVMI%20adapting/</url>
    <content><![CDATA[<p>太多接口了。。我就看看LibVMI用到的。</p>
<h1 id="what-is-HMP-Human-Monitor-Interface"><a href="#what-is-HMP-Human-Monitor-Interface" class="headerlink" title="what is HMP(Human Monitor Interface)"></a>what is HMP(Human Monitor Interface)</h1><p>HMP是QEMU上的简单交互式监视器，主要用于调试和简单的人类使用。更高级别的工具应该连接到QMP，它提供了与JSON的稳定接口，以便于可靠地解析。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint64_t</span> <span class="title function_">connection_read_memory</span> <span class="params">(<span class="type">uint64_t</span> user_paddr, <span class="type">void</span> *buf, <span class="type">uint64_t</span> user_len)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">uint64_t</span> <span class="title function_">connection_write_memory</span> <span class="params">(<span class="type">uint64_t</span> user_paddr, <span class="type">void</span> *buf, <span class="type">uint64_t</span> user_len)</span>;</span><br><span class="line">将一个物理地址（VM）映射到主机的虚拟地址，然后完成读写操作（将user_paddr拷贝进（出）user_paddr所在的内存）</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">send_success_ack</span> <span class="params">(<span class="type">int</span> connection_fd)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">send_fail_ack</span> <span class="params">(<span class="type">int</span> connection_fd)</span>;</span><br><span class="line">发送成功（失败）？信息到connection_fd</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> type;      <span class="comment">// 0 quit, 1 read, 2 write, ... rest reserved</span></span><br><span class="line">    <span class="type">uint64_t</span> address;  <span class="comment">// address to read from OR write to</span></span><br><span class="line">    <span class="type">uint64_t</span> length;   <span class="comment">// number of bytes to read OR write</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connection_handler</span> <span class="params">(<span class="type">int</span> connection_fd)</span>;</span><br><span class="line">connection_handler采用poll机制，（可能）收到来自LibVMI的指示，读（写）VM的paddr。</span><br><span class="line">判断理由：connection_fd被放到pollfd中参与到事件循环。</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pmemaccess_args</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> socket_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> *<span class="title">address</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> address_length;</span><br><span class="line">    <span class="type">char</span> *path; ?</span><br><span class="line">    Error **errp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">memory_access_thread</span> <span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">从监听socket_fd接收外来连接，套接字信息保存在address中，然后调用connection_handler。</span><br><span class="line">AF_UNIX用于在同一台机器上进程之间的通信。</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">qmp_pmemaccess</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *path, Error **errp)</span></span><br><span class="line">建立PF_UNIX的TCP套接字,将address地址域设为AF_UNIX，然后在pmemaccess_args-&gt;socket_fd监听外部连接。</span><br><span class="line">随后开启线程（memory_access_thread），屏蔽所有信号</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hmp_pmemaccess</span><span class="params">(Monitor *mon, <span class="type">const</span> QDict *qdict)</span></span><br><span class="line">path? hmp? qapi?</span><br><span class="line"></span><br><span class="line">qapi-schema.json</span><br><span class="line">qapi/libvmi.json</span><br></pre></td></tr></table></figure>

<p>看起来，LibVMI的qemu-kvm-patch利用了QEMU的HMP（基于QAPI和QMP），通过进程间通信实现：LibVMI发号施令，经HMP传递命令（经进程间通信），让QEMU执行，再由HMP传递反馈。在QEMU中，进程间通信基于PF_UNIX，开启一个线程监听LibVMI的连接请求，利用poll机制处理连接。</p>
<h1 id="QMP"><a href="#QMP" class="headerlink" title="QMP"></a>QMP</h1><p>QMP是一个基于JSON格式的文本交互模块，用于更改QEMU内部系统状态。</p>
<h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><p>Format:<br>{ “execute”: json-string, “arguments”: json-object, “id”: json-value }<br>or<br>{ “exec-oob”: json-string, “arguments”: json-object, “id”: json-value }</p>
<p>OOB — refer to tcp urgent mode. The packets including URG flags are meant to include OOB(out-of-band) data. Then the peer will recv and solve these packets right away. In other words, cut in line :) .</p>
<p>the “id” is coupled with OOB, identifing the command.</p>
<p>To ensure commands to be executed out-of-band get read and executed,<br>the client should have at most eight in-band commands in flight. — from docs&#x2F;interop&#x2F;qmp-spec.txt:139</p>
<h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><p>two response: success and error</p>
<h3 id="success"><a href="#success" class="headerlink" title="success"></a>success</h3><p>Format:<br>{ “return” : json-value, “id”: json-value }</p>
<h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>Format:<br>{ “error”: { “class”: json-string, “desc”: json-string }, “id”: json-value }<br>                Error class         Error description</p>
<h2 id="Asynchronous-events"><a href="#Asynchronous-events" class="headerlink" title="Asynchronous events"></a>Asynchronous events</h2><p>Refer to state changes.<br>Format:<br>{ “event”: json-string, “data”: json-object,<br>  “timestamp”: { “seconds”: json-number, “microseconds”: json-number } }</p>
<h2 id="Capabilities-Negotiation"><a href="#Capabilities-Negotiation" class="headerlink" title="Capabilities Negotiation"></a>Capabilities Negotiation</h2><p>When connection estabilish, the server is in this mode. Only qmp_capabilities is availiable (even asynchronous events are forbidden)</p>
<p>You can type like this:<br>{“execute”:”qmp_capabilities”,”arguments”:{“enable”:[“oob”]}}</p>
<h2 id="Ponder"><a href="#Ponder" class="headerlink" title="Ponder"></a>Ponder</h2><p>QMP应该起到解释作用，底层的原理是什么？</p>
<h1 id="QAPI"><a href="#QAPI" class="headerlink" title="QAPI"></a>QAPI</h1><p>QAPI是用于提供QEMU内外管理的一组C API，将C API映射到 Client JSON Protocol(QAPI schema?)，支持QMP和QGA。</p>
<h2 id="The-QAPI-schema-language"><a href="#The-QAPI-schema-language" class="headerlink" title="The QAPI schema language"></a>The QAPI schema language</h2><p>From: &#x2F;docs&#x2F;devel&#x2F;qapi-code-gen.txt<br>Someone generates C code from <strong>QAPI schema</strong> — QAPI schema language.</p>
<p>QAPI schema: defines the Client JSON Protocol’s commands and events, as well as <strong>types</strong> used by them.<br>type?:<br>simple types (a number of built-in types, such as <code>int</code> and <code>str</code>; as well as enumerations), arrays, complex types (structs and two flavors of unions), and alternate types (a choice between other types).</p>
<h2 id="Extension：EBNF"><a href="#Extension：EBNF" class="headerlink" title="Extension：EBNF"></a>Extension：EBNF</h2><p>Why write this? EBNF描述语言的语法，在未来rust学习的过程中，可以将一些特性用EBNF描述，加深记忆。（做学术我觉得也很有意思）。前面都是屁话，我喜欢用符号化语言描述一些东西，show me the code, talk is cheap.</p>
<p>History:<br>Ok, Backus aimed at descripting programming language. Standard: simple, precise, and powerful enough. Peter Naur did donate to it. So BNF(Backus-Naur From) is proposed. EBNF(Extended BNF) is to describe more compact descriptions.</p>
<p>Every rule three elements:<br>    LeftHandSide ⇐ RightHandSide<br>    Name EBNF rule          Describe the name<br>    italicized word(possibly with underscores)      </p>
<p>RHS can include names, characters, and combinations of four control forms: sequence, choice(|), option([]), and repetition({}). ⇐ also included.<br>Every character that stands for itself is put into a box. 打字打不出来。。。<br>Any other non-italicized characters that appear in a RHS stand for themselves.</p>
<h3 id="A-simple-example"><a href="#A-simple-example" class="headerlink" title="A simple example"></a>A simple example</h3><p>Describe integrers.<br>Attention: italicized. See at the markdown view.</p>
<p><em>digit</em> $\Leftarrow$ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9</p>
<p><em>integer</em> $\Leftarrow$ [+|-]<em>digit</em>{<em>digit</em>}</p>
<p>怎么越看越像编译原理。。。</p>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>生成树都来了（Derivation Tree）<br>原来不是，相当于初中水平的匹配。。。<br>讲的太啰嗦了，就不多记录了。</p>
<p>终端符号：only occur in RightHandSide<br>非终端符号：LeftHandSide</p>
<table>
<thead>
<tr>
<th align="center">symbol</th>
<th align="center">meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">repetition</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">except</td>
</tr>
<tr>
<td align="center">,</td>
<td align="center">concatenate</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">definition</td>
</tr>
<tr>
<td align="center">&#x3D;</td>
<td align="center">defining</td>
</tr>
<tr>
<td align="center">;</td>
<td align="center">terminator</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">terminator</td>
</tr>
</tbody></table>
<h2 id="回到Schema-syntax"><a href="#回到Schema-syntax" class="headerlink" title="回到Schema syntax"></a>回到Schema syntax</h2><p>based on JSON schema. and ENBF-like notation.<br>JSON-object: var obj1 &#x3D; {};<br>JSON-schema: {}</p>
<p><img src="/libvmi-patch/Schema_syntax.png"></p>
<p>A QAPI schema:<br>    SCHEMA &#x3D; TOP-LEVEL-EXPR…<br>    TOP-LEVEL-EXPR &#x3D; DIRECTIVE | DEFINITION<br>    DIRECTIVE &#x3D; INCLUDE | PRAGAM<br>    DEFINITION &#x3D; ENUM | STRUCT | UNION | ALTERNATE | COMMAND | EVENT</p>
<h2 id="Built-in-Types"><a href="#Built-in-Types" class="headerlink" title="Built-in Types"></a>Built-in Types</h2><p><img src="/libvmi-patch/JSON_schema_Built-in_Types.png"></p>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>qemu</tag>
        <tag>hack</tag>
      </tags>
  </entry>
</search>
